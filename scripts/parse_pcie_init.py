#####
# parser for fl_app
#
# this is a simple version only handle the (host, device) pair
# it does not detect the bottleneck or inter-host traffic
# the parsing process is very dirty so it should be updated with the version of fal_app
#
# Changelog:
#
# 1.1 4/27/2017: record all device and hosts and put into lists, modify the output format, accept argument from system
# 1.2 4/27/2017: change output format: Hn_Dn_size, Hn_Dn_util, Dn_Hn_size, Dn_Hn_util ...
# 1.3 4/28/2017: change timestamp to file modification time
# 1.4 5/02/2017: sorting bug fix, change output format: timestamp, [Hn_Dm_util], [Hn_Dm_size]
# 1.5 5/02/2017: use payload data to replace total data, sort by device ID
# 1.6 5/03/2017: remove dummy outputs, change output format: timpstamp, [Hn_ing_util, Hn_egr_util], [Hn_ing_size, Hn_egr_size], [Hn_Dm_util, Dm_Hn_util], [Hn_Dm_size, Dm_Hn_size]
# 1.7 5/03/2017: add the threshold for utilization and payload size
# 1.8 5/03/2017: fix for all zero data and change timestamp data source
# 1.9 5/03/2017: touch fw_success when the first line is successfully generated and remove the file when generating data lines
# 2.0 5/04/2017: change output format
# 2.1 6/12/2017: fix output error
# 2.2 6/13/2017: check the location of head line, add debug flag df, 1: output tag and data at the same time, 0: default output
#
# mhchen

import sys
import os.path
import time
 
df = 0 # debug flag

# skip the data that goes below the threshold
threshold_util=0.02 # in percentage, i.e. 0.02 means 0.02%
threshold_payload_size=10

ingdata = [dict() for x in range(7)]
egrdata = [dict() for x in range(7)]

# index 0-6 in ingdata/egrdata:
# linkutil (used in this ver)
# data
# rate
# pdata
# prate
# ptlp
# timer (used in this ver)

idmap = {}  # host_addr - device_addr mapping table
namemap = {}  # name - address translation table
lookup = set([])  # nodes_addr table (host+device)
devlist = {}  # list of all deivces in loading data
hostlist = {}  # list of all hosts in loading data

loadingfile = "loadingsample.txt"
routefile = "routesample.txt"

def getAddr(gep, port):  # translate loading gep,port format into route gid format (last 3 digits onlt)
	strx = hex(int(port)).split('x')[-1]
	if len(strx) > 1:
		return "00" + hex(int(gep)).split('x')[-1] + strx
	else:
		return "00" + hex(int(gep)).split('x')[-1] + "0" + strx


# generated by fal_app show 9797 route > routesample.txt
rf = open(routefile, 'r')

# remove empty and head line
preParse=True
while preParse:
	rs = rf.readline().split(",")  # remove meaningless items
	if len(rs) > 1 and rs[0]=="Port#":
		preParse=False

rs = rf.readline().replace("ffffffff,", "").replace(",000", ",").replace("\n", "").split(",")[1:]
# remove meaningless items, leading 3 zeros, discard port info
while len(rs) > 1:
#	if rs[-1] != rs[-2]: #IsDevice?
	if rs[0] in idmap:
		idmap[rs[0]].add(rs[-2])  # link path PGID(host) -> Target
		lookup.add(rs[-2])
	else:
		idmap[rs[0]] = {rs[-2]}  # link path PGID(host) -> Target
		lookup.add(rs[0])
		lookup.add(rs[-2])
	rs = rf.readline().replace("ffffffff,", "").replace(",000", ",").replace("\n", "").split(",")[1:]

# falconwitch routes are unnecessary in this version so just skip that

rf.close()
# end of route parsing

# generated by fal_app show 9797 loading > loadingsample.txt
# remove empty and head line
rf = open(loadingfile, 'r')
preParse=True
while preParse:
	rs = rf.readline().split(",")  # remove meaningless items
	if len(rs) > 1 and rs[0]=="GEP ID":
		preParse=False

# for detecting all zero data (two items with Port ID 0 and belongs to the same GEP ID and has different TYPE)
zerocheck=["-1","-1","-1"]

rs = rf.readline().replace("\n", "").split(",")  # remove meaningless items
while len(rs) > 1:

	# detecting all zero data
	if zerocheck[2]!=rs[2] and zerocheck[1]==rs[1] and zerocheck[0]==rs[0]:
		exit()
	else:
		zerocheck[2]=rs[2]
		zerocheck[1]=rs[1]
		zerocheck[0]=rs[0]

	curAddr = getAddr(rs[0], rs[1])
	if rs[2][:1] == "D":
		devlist[curAddr] = rs[2]
	elif rs[2][:1] == "H":
		hostlist[curAddr] = rs[2]
	if curAddr in lookup:
		# update the linkutil..etc
		namemap[curAddr] = rs[2]  # addr -> type translation
		if rs[4] == "Egr":
			for i in range(7):
				# hack for simple version, be aware of all zero data
				s = rs[i + 5].lstrip("0")
				if s and s[0] == ".": # percentage data 0.xx%
					s = "0" + s

				# threshold processing
				if i==0: #util
					if float(s.rstrip("%")) < threshold_util:
						s=""
				elif i==3: #payload size
					if s!= "" and int(s) < threshold_payload_size:
						s=""

				egrdata[i][curAddr] = s

		else: #Ing data
			for i in range(7):
				s = rs[i + 5].lstrip("0")
				if s and s[0] == ".": # percentage data 0.xx%
					s = "0" + s

				# threshold processing
				if i==0: #util
					if float(s.rstrip("%")) < threshold_util:
						s=""
				elif i==3: #payload size
					if s != "" and int(s) < threshold_payload_size:
						s=""

				ingdata[i][curAddr] = s
	rs = rf.readline().replace("\n", "").split(",")  # remove meaningless items

rf.close()
# end of loading parsing

# output the result

# covert dict into sorted lists....
hostlist = sorted(hostlist.items(), key=lambda t: t[1])
devlist = sorted(devlist.items(), key=lambda t: t[1])
acthosts = idmap.viewkeys()

out2 = ""
if len(sys.argv) > 1:  # print out the lists only
	out = "timestamp"
	for h in range(len(hostlist)):
		out=out + "," + hostlist[h][1] + "_ing_util," + hostlist[h][1] + "_egr_util" 
		out2=out2 + "," + hostlist[h][1] + "_ing_size," + hostlist[h][1] + "_egr_size"
	out=out + out2
	out2=""

	for d in range(len(devlist)):
		for h in range(len(hostlist)):
			if devlist[d][0] in idmap[hostlist[h][0]]:
				out=out + "," +  devlist[d][1] + "(" + hostlist[h][1] + ")_ing_util," + devlist[d][1] + "(" + hostlist[h][1] + ")_egr_util"
				out2=out2 + "," +  devlist[d][1] + "(" + hostlist[h][1] + ")_ing_size," + devlist[d][1] + "(" + hostlist[h][1] +  ")_egr_size" 
	open("fw_success",'a').close()
else:
	out= time.strftime("%Y%m%d") + str(time.time())
	if df == 0: # normal output
		for h in range(len(hostlist)):
			out=out + "," + ingdata[0][hostlist[h][0]] +  "," + egrdata[0][hostlist[h][0]] 
			out2=out2 + "," + ingdata[3][hostlist[h][0]] +  "," + egrdata[3][hostlist[h][0]]
		out=out+out2
		out2=""

		for d in range(len(devlist)):
			for h in range(len(hostlist)): 
				if hostlist[h][0] in acthosts and devlist[d][0] in idmap[hostlist[h][0]]:
					out=out + "," + ingdata[0][devlist[d][0]] +  "," + egrdata[0][devlist[d][0]] #util
					out2=out2 + "," + ingdata[3][devlist[d][0]] +  "," + egrdata[3][devlist[d][0]] #payload
	else: # debug output with field name
		for h in range(len(hostlist)):
			out=out + "," + hostlist[h][1] + "_ing_util:" + ingdata[0][hostlist[h][0]] +  "," + hostlist[h][1] + "_egr_util:" + egrdata[0][hostlist[h][0]] 
			out2=out2 + "," + hostlist[h][1] + "_ing_size:" + ingdata[3][hostlist[h][0]] +  "," + hostlist[h][1] + "_egr_size:" + egrdata[3][hostlist[h][0]]
		out=out+out2
		out2=""

		for d in range(len(devlist)):  
			for h in range(len(hostlist)): 
				if hostlist[h][0] in acthosts and devlist[d][0] in idmap[hostlist[h][0]]:
					out=out + "," +  devlist[d][1] + "(" + hostlist[h][1] + ")_ing_util:" + ingdata[0][devlist[d][0]] +  "," + devlist[d][1] + "(" + hostlist[h][1] + ")_egr_util:" + egrdata[0][devlist[d][0]] #util
					out2=out2 + "," +  devlist[d][1] + "(" + hostlist[h][1] + ")_ing_size:" + ingdata[3][devlist[d][0]] +  "," + devlist[d][1] + "(" + hostlist[h][1] +  ")_egr_size:" + egrdata[3][devlist[d][0]] #payload


	if os.path.isfile("fw_success"):
		os.remove("fw_success")
print out + out2
